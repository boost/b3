@mixin b3-width-misc {
  /*
   * Print-conditional width styling, worth nothing that all of this was copied
   * from UIkits `uikit/src/scss/components/width.scss` breakpoint definitions.
   */
  @media print {
    /* Whole */
    .uk-width-1-1\@p { width: 100%; }

    /* Halves */
    .uk-width-1-2\@p { width: 50%; }

    /* Thirds */
    .uk-width-1-3\@p { width: unquote('calc(100% * 1 / 3.001)'); }
    .uk-width-2-3\@p { width: unquote('calc(100% * 2 / 3.001)'); }

    /* Quarters */
    .uk-width-1-4\@p { width: 25%; }
    .uk-width-3-4\@p { width: 75%; }

    /* Fifths */
    .uk-width-1-5\@p { width: 20%; }
    .uk-width-2-5\@p { width: 40%; }
    .uk-width-3-5\@p { width: 60%; }
    .uk-width-4-5\@p { width: 80%; }

    /* Sixths */
    .uk-width-1-6\@p { width: unquote('calc(100% * 1 / 6.001)'); }
    .uk-width-5-6\@p { width: unquote('calc(100% * 5 / 6.001)'); }

    /* Pixel */
    .uk-width-small\@p { width: $width-small-width; }
    .uk-width-medium\@p { width: $width-medium-width; }
    .uk-width-large\@p { width: $width-large-width; }
    .uk-width-xlarge\@p { width: $width-xlarge-width; }
    .uk-width-2xlarge\@p { width: $width-2xlarge-width; }
    @if ($deprecated == true) {
    .uk-width-xxlarge\@p { width: $width-2xlarge-width; }
    }

    /* Auto */
    .uk-width-auto\@p { width: auto; }

    /* Expand */
    .uk-width-expand\@p {
      flex: 1;
      min-width: 1px;
    }
  }
}
@mixin hook-width-misc { @include b3-width-misc; }
